//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Hysteria/Dialog/ConversationControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ConversationControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ConversationControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ConversationControls"",
    ""maps"": [
        {
            ""name"": ""Primary"",
            ""id"": ""773a3401-ff17-4bfb-b5cb-550267140dae"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""23758c9e-0afa-40d3-b010-4df87adafa0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Opt1"",
                    ""type"": ""Button"",
                    ""id"": ""b6d52361-41cc-4de0-8b69-ca95b5821fb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Opt2"",
                    ""type"": ""Button"",
                    ""id"": ""2a856be6-e7e9-4c8e-ace3-37fba5c93b8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Opt3"",
                    ""type"": ""Button"",
                    ""id"": ""21899c2f-eead-4b3b-9c86-e844e28d7253"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Opt4"",
                    ""type"": ""Button"",
                    ""id"": ""ef238865-72ef-4675-a749-caef00e1e367"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92a94273-b2b1-4cbb-979b-1313f561a4a1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""621ad49f-0c1d-475d-b777-b52ec0602d16"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcaa2599-5cd0-489e-9984-5475888445bd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c4bec8b-89c4-46bd-b09b-f3e1a39de8ca"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daeb680a-3085-49a3-a680-d57dd92b7b23"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f4e6891-aaca-4611-9910-f4bb0949ce72"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63f5ba99-b5e0-4398-a81f-594ac8f625c0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b15034f2-1d9e-49a5-99c3-00715cf52ed8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8ffe081-f640-446d-889f-8bf55101accd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4eb772f2-6ba1-4ba6-aee5-1083c9903870"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Primary
        m_Primary = asset.FindActionMap("Primary", throwIfNotFound: true);
        m_Primary_Next = m_Primary.FindAction("Next", throwIfNotFound: true);
        m_Primary_Opt1 = m_Primary.FindAction("Opt1", throwIfNotFound: true);
        m_Primary_Opt2 = m_Primary.FindAction("Opt2", throwIfNotFound: true);
        m_Primary_Opt3 = m_Primary.FindAction("Opt3", throwIfNotFound: true);
        m_Primary_Opt4 = m_Primary.FindAction("Opt4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Primary
    private readonly InputActionMap m_Primary;
    private List<IPrimaryActions> m_PrimaryActionsCallbackInterfaces = new List<IPrimaryActions>();
    private readonly InputAction m_Primary_Next;
    private readonly InputAction m_Primary_Opt1;
    private readonly InputAction m_Primary_Opt2;
    private readonly InputAction m_Primary_Opt3;
    private readonly InputAction m_Primary_Opt4;
    public struct PrimaryActions
    {
        private @ConversationControls m_Wrapper;
        public PrimaryActions(@ConversationControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Next => m_Wrapper.m_Primary_Next;
        public InputAction @Opt1 => m_Wrapper.m_Primary_Opt1;
        public InputAction @Opt2 => m_Wrapper.m_Primary_Opt2;
        public InputAction @Opt3 => m_Wrapper.m_Primary_Opt3;
        public InputAction @Opt4 => m_Wrapper.m_Primary_Opt4;
        public InputActionMap Get() { return m_Wrapper.m_Primary; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PrimaryActions set) { return set.Get(); }
        public void AddCallbacks(IPrimaryActions instance)
        {
            if (instance == null || m_Wrapper.m_PrimaryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PrimaryActionsCallbackInterfaces.Add(instance);
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
            @Opt1.started += instance.OnOpt1;
            @Opt1.performed += instance.OnOpt1;
            @Opt1.canceled += instance.OnOpt1;
            @Opt2.started += instance.OnOpt2;
            @Opt2.performed += instance.OnOpt2;
            @Opt2.canceled += instance.OnOpt2;
            @Opt3.started += instance.OnOpt3;
            @Opt3.performed += instance.OnOpt3;
            @Opt3.canceled += instance.OnOpt3;
            @Opt4.started += instance.OnOpt4;
            @Opt4.performed += instance.OnOpt4;
            @Opt4.canceled += instance.OnOpt4;
        }

        private void UnregisterCallbacks(IPrimaryActions instance)
        {
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
            @Opt1.started -= instance.OnOpt1;
            @Opt1.performed -= instance.OnOpt1;
            @Opt1.canceled -= instance.OnOpt1;
            @Opt2.started -= instance.OnOpt2;
            @Opt2.performed -= instance.OnOpt2;
            @Opt2.canceled -= instance.OnOpt2;
            @Opt3.started -= instance.OnOpt3;
            @Opt3.performed -= instance.OnOpt3;
            @Opt3.canceled -= instance.OnOpt3;
            @Opt4.started -= instance.OnOpt4;
            @Opt4.performed -= instance.OnOpt4;
            @Opt4.canceled -= instance.OnOpt4;
        }

        public void RemoveCallbacks(IPrimaryActions instance)
        {
            if (m_Wrapper.m_PrimaryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPrimaryActions instance)
        {
            foreach (var item in m_Wrapper.m_PrimaryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PrimaryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PrimaryActions @Primary => new PrimaryActions(this);
    public interface IPrimaryActions
    {
        void OnNext(InputAction.CallbackContext context);
        void OnOpt1(InputAction.CallbackContext context);
        void OnOpt2(InputAction.CallbackContext context);
        void OnOpt3(InputAction.CallbackContext context);
        void OnOpt4(InputAction.CallbackContext context);
    }
}
