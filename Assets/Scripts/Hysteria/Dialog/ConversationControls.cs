//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Hysteria/Dialog/ConversationControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ConversationControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ConversationControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ConversationControls"",
    ""maps"": [
        {
            ""name"": ""Primary"",
            ""id"": ""773a3401-ff17-4bfb-b5cb-550267140dae"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""23758c9e-0afa-40d3-b010-4df87adafa0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNext"",
                    ""type"": ""Button"",
                    ""id"": ""b6d52361-41cc-4de0-8b69-ca95b5821fb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectPrevious"",
                    ""type"": ""Button"",
                    ""id"": ""88b1f4e3-2638-4fca-b6b2-54c8fa457f7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelChoices"",
                    ""type"": ""Button"",
                    ""id"": ""04d167a0-8551-48a8-8d66-74f18400df61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92a94273-b2b1-4cbb-979b-1313f561a4a1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""621ad49f-0c1d-475d-b777-b52ec0602d16"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcaa2599-5cd0-489e-9984-5475888445bd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c4bec8b-89c4-46bd-b09b-f3e1a39de8ca"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16799dfa-c9ff-420a-b6ed-14569ee40bcd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPrevious"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38895bfa-f5c3-4dd5-8c86-906ed86a598e"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPrevious"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffd30db0-392e-412b-baf0-39af88921268"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelChoices"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5681598b-edb5-482e-acb7-22cd4e8ca296"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelChoices"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Primary
        m_Primary = asset.FindActionMap("Primary", throwIfNotFound: true);
        m_Primary_Continue = m_Primary.FindAction("Continue", throwIfNotFound: true);
        m_Primary_SelectNext = m_Primary.FindAction("SelectNext", throwIfNotFound: true);
        m_Primary_SelectPrevious = m_Primary.FindAction("SelectPrevious", throwIfNotFound: true);
        m_Primary_CancelChoices = m_Primary.FindAction("CancelChoices", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Primary
    private readonly InputActionMap m_Primary;
    private List<IPrimaryActions> m_PrimaryActionsCallbackInterfaces = new List<IPrimaryActions>();
    private readonly InputAction m_Primary_Continue;
    private readonly InputAction m_Primary_SelectNext;
    private readonly InputAction m_Primary_SelectPrevious;
    private readonly InputAction m_Primary_CancelChoices;
    public struct PrimaryActions
    {
        private @ConversationControls m_Wrapper;
        public PrimaryActions(@ConversationControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_Primary_Continue;
        public InputAction @SelectNext => m_Wrapper.m_Primary_SelectNext;
        public InputAction @SelectPrevious => m_Wrapper.m_Primary_SelectPrevious;
        public InputAction @CancelChoices => m_Wrapper.m_Primary_CancelChoices;
        public InputActionMap Get() { return m_Wrapper.m_Primary; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PrimaryActions set) { return set.Get(); }
        public void AddCallbacks(IPrimaryActions instance)
        {
            if (instance == null || m_Wrapper.m_PrimaryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PrimaryActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
            @SelectNext.started += instance.OnSelectNext;
            @SelectNext.performed += instance.OnSelectNext;
            @SelectNext.canceled += instance.OnSelectNext;
            @SelectPrevious.started += instance.OnSelectPrevious;
            @SelectPrevious.performed += instance.OnSelectPrevious;
            @SelectPrevious.canceled += instance.OnSelectPrevious;
            @CancelChoices.started += instance.OnCancelChoices;
            @CancelChoices.performed += instance.OnCancelChoices;
            @CancelChoices.canceled += instance.OnCancelChoices;
        }

        private void UnregisterCallbacks(IPrimaryActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
            @SelectNext.started -= instance.OnSelectNext;
            @SelectNext.performed -= instance.OnSelectNext;
            @SelectNext.canceled -= instance.OnSelectNext;
            @SelectPrevious.started -= instance.OnSelectPrevious;
            @SelectPrevious.performed -= instance.OnSelectPrevious;
            @SelectPrevious.canceled -= instance.OnSelectPrevious;
            @CancelChoices.started -= instance.OnCancelChoices;
            @CancelChoices.performed -= instance.OnCancelChoices;
            @CancelChoices.canceled -= instance.OnCancelChoices;
        }

        public void RemoveCallbacks(IPrimaryActions instance)
        {
            if (m_Wrapper.m_PrimaryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPrimaryActions instance)
        {
            foreach (var item in m_Wrapper.m_PrimaryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PrimaryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PrimaryActions @Primary => new PrimaryActions(this);
    public interface IPrimaryActions
    {
        void OnContinue(InputAction.CallbackContext context);
        void OnSelectNext(InputAction.CallbackContext context);
        void OnSelectPrevious(InputAction.CallbackContext context);
        void OnCancelChoices(InputAction.CallbackContext context);
    }
}
